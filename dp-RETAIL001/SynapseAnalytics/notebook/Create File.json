{
	"name": "Create File",
	"properties": {
		"folder": {
			"name": "Archives"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c2da2729-7595-4bac-83b3-ce364dc0daf4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a3ff5199-e54c-47de-996a-c9fbb0a8ff6f/resourceGroups/dp-dev-RETAIL001/providers/Microsoft.Synapse/workspaces/dp-retail001-dev-synapse/bigDataPools/spark",
				"name": "spark",
				"type": "Spark",
				"endpoint": "https://dp-retail001-dev-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"df = spark.sql(\"\"\"SELECT DISTINCT CustomerID\r\n",
					"                                ,CustomerName\r\n",
					"                                ,CustomerCategoryName\r\n",
					"                                ,DeliveryMethodName\r\n",
					"                                ,CityName\r\n",
					"                                ,AC.LatestRecordedPopulation AS CityLatestRecordedPopulation\r\n",
					"                                ,StateProvinceCode\r\n",
					"                                ,StateProvinceName\r\n",
					"                                ,SalesTerritory\r\n",
					"                                ,CountryName\r\n",
					"                                ,FormalName\r\n",
					"                                ,IsoAlpha3Code\r\n",
					"                                ,CountryType\r\n",
					"                                ,CreditLimit\r\n",
					"                                ,IsStatementSent\r\n",
					"                                ,IsOnCreditHold\r\n",
					"                                ,PaymentDays\r\n",
					"                                ,RunPosition\r\n",
					"                                ,C.ValidFrom\r\n",
					"                                ,C.ValidTo                       \r\n",
					"                     FROM `raw_WideWorldImporters`.`Sales_Customers` AS C   \r\n",
					"                    INNER JOIN `raw_WideWorldImporters`.`Sales_CustomerCategories` AS CC \r\n",
					"                        ON C.CustomerCategoryId = CC.CustomerCategoryId  \r\n",
					"                    INNER JOIN `raw_WideWorldImporters`.`Application_DeliveryMethods` AS DM\r\n",
					"                        ON C.DeliveryMethodID = DM.DeliveryMethodID\r\n",
					"                    INNER JOIN `raw_WideWorldImporters`.`Application_Cities` AS AC\r\n",
					"                        ON C.DeliveryCityID = AC.CityID\r\n",
					"                    INNER JOIN `raw_WideWorldImporters`.`Application_StateProvinces` AS AS\r\n",
					"                        ON AC.StateProvinceID = AS.StateProvinceID\r\n",
					"                    INNER JOIN `raw_WideWorldImporters`.`Application_Countries` AS ACou\r\n",
					"                        ON AS.CountryID = Acou.CountryID\r\n",
					"                    WHERE C.ValidTo IS NOT NULL;\"\"\")\r\n",
					"df.write.parquet(\"/gold/dwh_Retail/DimCustomer/\", mode = 'overwrite')\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.sql(\"\"\"SELECT SO.OrderID\r\n",
					"      ,SO.CustomerID\r\n",
					"      ,SO.OrderDate\r\n",
					"\t  ,SOL.StockItemID\r\n",
					"\t  ,SOL.Quantity\r\n",
					"\t  ,SOL.UnitPrice\r\n",
					"\t  ,SUM(Quantity * UnitPrice) AS Amount\r\n",
					"  FROM raw_WideWorldImporters.Sales_OrderLines SOL\r\n",
					"  INNER JOIN raw_WideWorldImporters.Sales_Orders SO\r\n",
					"\tON SO.OrderID = SOL.OrderID\r\n",
					"GROUP BY SO.OrderID\r\n",
					",SO.CustomerID\r\n",
					",SO.OrderDate\r\n",
					",SOL.StockItemID\r\n",
					",SOL.Quantity\r\n",
					",SOL.UnitPrice\"\"\")\r\n",
					"df.write.parquet(\"/gold/dwh_Retail/FactOrder/\", mode = 'overwrite')"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.sql(\"\"\"SELECT StockItemId\r\n",
					",StockItemName\r\n",
					",Brand\r\n",
					",Size\r\n",
					",Barcode\r\n",
					",TaxRate\r\n",
					",UnitPrice\r\n",
					",RecommendedRetailPrice\r\n",
					",TypicalWeightPerUnit\r\n",
					",MarketingComments\r\n",
					",InternalComments\r\n",
					",CustomFields\r\n",
					",Tags\r\n",
					",SearchDetails\r\n",
					",LastEditedBy\r\n",
					" FROM raw_WideWorldImporters.Warehouse_StockItems\"\"\")\r\n",
					"df.write.parquet(\"/gold/dwh_Retail/DimProduct/\", mode = 'overwrite')"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"    %%sql \r\n",
					"    DROP TABLE raw_WideWorldImporters.Warehouse_StockItems"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE TABLE `raw_WideWorldImporters`.`Warehouse_StockItem`(StockItemID int,\r\n",
					"\tStockItemName STRING,\r\n",
					"\tSupplierID int,\r\n",
					"\tColorID int ,\r\n",
					"\tUnitPackageID int,\r\n",
					"\tOuterPackageID int,\r\n",
					"\tBrand STRING ,\r\n",
					"\tSize STRING ,\r\n",
					"\tLeadTimeDays int,\r\n",
					"\tQuantityPerOuter int,\r\n",
					"\tIsChillerStock int,\r\n",
					"\tBarcode STRING ,\r\n",
					"\tTaxRate decimal(18, 3),\r\n",
					"\tUnitPrice decimal(18, 2),\r\n",
					"\tRecommendedRetailPrice decimal(18, 2) ,\r\n",
					"\tTypicalWeightPerUnit decimal(18, 3),\r\n",
					"\tMarketingComments STRING ,\r\n",
					"\tInternalComments STRING,\r\n",
					"\tCustomFields STRING ,\r\n",
					"\tTags   STRING,\r\n",
					"\tSearchDetails  STRING,\r\n",
					"\tLastEditedBy int,\r\n",
					"\tValidFrom timestamp,\r\n",
					"\tValidTo timestamp) USING PARQUET\r\n",
					"LOCATION 'raw/WideWorldImporters/Internal/Warehouse_StockItems/StockItems.parquet'\r\n",
					"\r\n",
					""
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM `raw_WideWorldImporters`.`Warehouse_StockItem`"
				],
				"execution_count": 14
			}
		]
	}
}